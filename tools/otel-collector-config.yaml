receivers:
  otlp/app:
    protocols:
      grpc:

  # Dummy receiver that's never used, because a pipeline is required to have one.
  otlp/spanmetrics:
    protocols:
      grpc:
        endpoint: "localhost:12345"      

  otlp/spanmetrics_output:
    protocols:
      grpc:
        endpoint: "localhost:55677"          

exporters:
  prometheus:
    endpoint: "0.0.0.0:8889"
    namespace: otel
    metric_expiration: 15m
    # const_labels:
    #   label1: value1
  logging:
    loglevel: warn


  otlp/spanmetrics:
    endpoint: "localhost:55677"
    insecure: true

  # Export for Jaeger
  jaeger:
    endpoint: jaeger-all-in-one:14250
    insecure: true




processors:
  batch:

  spanmetrics:
    metrics_exporter: otlp/spanmetrics
    latency_histogram_buckets: [1ms, 5ms, 10ms,20ms, 30ms,40ms,50ms,60ms,70ms,80ms,90ms,100ms,120ms, 140ms,160ms, 180ms,200ms,250ms, 300ms,400ms,500ms,600ms,700ms, 800ms,900ms, 1000ms, 2000ms, 3000ms,4000ms,5000ms,6000ms,8000ms, 10000ms,15000ms,20000ms, 60000ms]
    dimensions:
      - name: http.method
        default: GET
      - name: http.status_code      

extensions:
  health_check:
  pprof:
    endpoint: :1888
  zpages:
    endpoint: :55679

service:
  extensions: [pprof, zpages, health_check]
  pipelines:
    traces:
      receivers: [otlp/app]
      processors: [spanmetrics, batch]
      exporters: [logging, jaeger]

    # The exporter name must match the metrics_exporter name.
    # The receiver is just a dummy and never used; added to pass validation requiring at least one receiver in a pipeline.
    metrics/spanmetrics:
      receivers: [otlp/spanmetrics]
      exporters: [otlp/spanmetrics]

    metrics:
        receivers: [otlp/app, otlp/spanmetrics_output]
        processors: [batch]
        exporters: [logging, prometheus]
